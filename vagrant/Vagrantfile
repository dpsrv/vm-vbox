#required_plugins = %w( vagrant-faster )
#required_plugins.each do |plugin|
	#system "vagrant plugin install #{plugin}" unless Vagrant.has_plugin? plugin
#end

Vagrant.configure('2') do |config|

	config.trigger.before :up do |trigger|
		trigger.run = { inline: <<-_EOT_
			bash -c '
				if [ -n "$DPSRV_VM_HOME" -a -d "$DPSRV_VM_HOME" ]; then
					echo "Setting VBox machinefolder to $DPSRV_VM_HOME"
					VBoxManage setproperty machinefolder "$DPSRV_VM_HOME"
				fi
			'
_EOT_
		}
	end
	
	config.trigger.after :up do |trigger|
		trigger.run = { inline: <<-_EOT_
			bash -c '
				if [ -n "$DPSRV_VM_HOME" -a -d "$DPSRV_VM_HOME" ]; then
					echo "Setting VBox machinefolder to default"
					VBoxManage setproperty machinefolder default
				fi
			'
_EOT_
		}
	end

	config.vm.define 'docker'

	config.vm.box			= 'fedora/41-cloud-base'

	#config.vm.provision "shell", inline: <<-SHELL
		#sudo sed -i 's/ console=ttyS0[^ ]*//' /etc/default/grub
#
		## Regenerate GRUB config for BIOS-based system
		#sudo grub2-mkconfig -o /boot/grub2/grub.cfg
	#SHELL

	config.vm.hostname		= "#{ENV['DPSRV_REGION']}-#{ENV['DPSRV_NODE']}"

	config.vm.disk :disk, size: '50GB', primary: true

	default_if = 'enp0s9'
	#default_if = 'eth2'

	config.vm.network 'private_network', type: 'dhcp'

	for bridgeName in `./ifs.sh`.split("\n")
		bridge=`networksetup -listallhardwareports | grep -A 1 "Hardware Port: #{bridgeName}" | sed 's/^[^:]*: //g' | nl | sort -nr | cut -f2- | paste - - | sed $'s/[\s\t][\s\t]*/: /' | tr -d '\n'`
		dev=bridge.gsub(/:.*$/, '')
		prefix= 'DPSRV_DOCKER_'+dev;
		if ENV[prefix + '_IP']
			config.vm.network 'public_network', bridge: bridge, ip: "#{ENV[prefix + '_IP']}/24", use_dhcp_assigned_default_route: true
		else
			config.vm.network 'public_network', bridge: bridge
		end
	end

	# for i in [ 53 ]
		# config.vm.network :forwarded_port, guest: i, host: 50000+i, protocol: 'tcp'
		# config.vm.network :forwarded_port, guest: i, host: 50000+i, protocol: 'udp'
	# end

	config.vm.synced_folder	'/Users', '/Users'
	config.vm.synced_folder	'.', '/vagrant'
	config.vm.synced_folder "#{Dir.home}", '/home/host_user'
	# config.vm.synced_folder "#{Dir.home}/.config/git/dpsrv", '/root/.config/git/dpsrv'

	Dir.entries('/Volumes/').each do |entry|
		dir = "/Volumes/#{entry}"
		stat = File.stat(dir)
		next if entry == '..' || entry == '.' || not(File.directory? dir) 
		config.vm.synced_folder dir, dir
	end

	config.vm.provider 'virtualbox' do |vb|
		vb.name		= 'docker'
		# vb.gui		= true

		vb.memory	= '8192'
		vb.cpus		= '3'

		vb.check_guest_additions = true

		vb.customize ['modifyvm', :id, '--cpuexecutioncap', '50']

		vb.customize ["modifyvm", :id, "--uart1", "0x3f8", "4"] # COM1, 4 = IRQ
		vb.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]

		vb.customize ['modifyvm', :id, '--ioapic', 'on']
		vb.customize ['modifyvm', :id, '--nested-hw-virt', 'on']
		vb.customize ['modifyvm', :id, '--paravirtprovider', 'kvm']

		vb.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on']

		#vb.customize ['modifyvm', :id, '--autostart-enabled', 'on']
		#vb.customize ['modifyvm', :id, '--autostop-type', 'acpishutdown']
		#vb.customize ['modifyvm', :id, '--acpi', 'on']
		#vb.customize ['modifyvm', :id, '--apic', 'on']
		#vb.customize ['modifyvm', :id, '--x2apic', 'on']
		#vb.customize ['modifyvm', :id, '--hwvirtex', 'on']

		vb.customize ['modifyvm', :id, '--vram', '128']
		#vb.customize ['modifyvm', :id, '--graphicscontroller', 'vmsvga']
		vb.customize ['modifyvm', :id, '--graphicscontroller', 'VBoxSVGA']

		#vb.customize ['modifyvm', :id, '--cableconnected1', 'on']
		#vb.customize ['modifyvm', :id, '--nat-localhostreachable1', 'on']

		vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
		vb.customize ['modifyvm', :id, '--nictype1', 'virtio']

		# vb.customize ['setextradata', :id, 'VBoxInternal/Devices/VMMDev/0/Config/HeartbeatTimeout', '300000000000']
	end

	config.vm.provision 'shell',
		env: {
			"NM_C_#{default_if}_GW" => ENV['DPSRV_DOCKER_en0_GW'],
			"NM_C_#{default_if}_IP" => ENV['DPSRV_DOCKER_en0_IP'],
			'NM_C_DEFAULT_GW' => default_if,

			'DPSRV_REGION' => ENV['DPSRV_REGION'],
			'DPSRV_NODE' => ENV['DPSRV_NODE']
		},
		inline: <<-_EOT_
			set -x
			/vagrant/user_data.fedora41
		_EOT_

end

