
Vagrant.configure('2') do |config|

	config.trigger.before :up do |trigger|
		trigger.run = { inline: <<-_EOT_
			bash -c '
				if [ -n "$DPSRV_VM_HOME" -a -d "$DPSRV_VM_HOME" ]; then
					echo "Setting VBox machinefolder to $DPSRV_VM_HOME"
					VBoxManage setproperty machinefolder "$DPSRV_VM_HOME"
				fi
			'
_EOT_
		}
	end
	
	config.trigger.after :up do |trigger|
		trigger.run = { inline: <<-_EOT_
			bash -c '
				if [ -n "$DPSRV_VM_HOME" -a -d "$DPSRV_VM_HOME" ]; then
					echo "Setting VBox machinefolder to default"
					VBoxManage setproperty machinefolder default
				fi
			'
_EOT_
		}
	end

	config.vm.define 'docker'

	config.vm.box			= 'fedora/40-cloud-base'
	config.vm.box_version	= '40.20240414.0'
	config.vm.hostname		= "#{ENV['DPSRV_REGION']}-#{ENV['DPSRV_NODE']}"

	config.vm.network 'private_network', type: 'dhcp'

	for bridgeName in `./ifs.sh`.split("\n")
		bridge=`networksetup -listallhardwareports | grep -A 1 "Hardware Port: #{bridgeName}" | sed 's/^[^:]*: //g' | nl | sort -nr | cut -f2- | paste - - | sed $'s/[\s\t][\s\t]*/: /' | tr -d '\n'`
		config.vm.network 'public_network', bridge: bridge, auto_config: false
	end

	# for i in [ 53 ]
		# config.vm.network :forwarded_port, guest: i, host: 50000+i, protocol: 'tcp'
		# config.vm.network :forwarded_port, guest: i, host: 50000+i, protocol: 'udp'
	# end

	config.vm.synced_folder	'/Users', '/Users'
	config.vm.synced_folder	'.', '/vagrant'
	config.vm.synced_folder "#{Dir.home}", '/home/host_user'
	# config.vm.synced_folder "#{Dir.home}/.config/git/dpsrv", '/root/.config/git/dpsrv'

	Dir.entries('/Volumes/').each do |entry|
		dir = "/Volumes/#{entry}"
		stat = File.stat(dir)
		next if entry == ".." || entry == "." || not(File.directory? dir) 
		config.vm.synced_folder dir, dir
	end

	config.vm.provider 'virtualbox' do |vb|
		vb.name		= 'docker'
		vb.gui		= true

		vb.memory	= 8192
		vb.cpus		= 4

		vb.check_guest_additions = false

		vb.customize ['modifyvm', :id, '--autostart-enabled', 'on']
		vb.customize ['modifyvm', :id, '--autostop-type', 'acpishutdown']
		vb.customize ['modifyvm', :id, '--acpi', 'on']
		vb.customize ['modifyvm', :id, '--ioapic', 'on']
		vb.customize ['modifyvm', :id, '--apic', 'on']
		vb.customize ['modifyvm', :id, '--x2apic', 'on']
		vb.customize ['modifyvm', :id, '--hwvirtex', 'on']

		vb.customize ['modifyvm', :id, '--graphicscontroller', 'vmsvga']
		# vb.customize ['modifyvm', :id, '--graphicscontroller', 'vboxvga']
		vb.customize ['modifyvm', :id, '--accelerate3d', 'off']
		vb.customize ['modifyvm', :id, '--accelerate2dvideo', 'off']

		vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
		vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
		vb.customize ["modifyvm", :id, "--nat-localhostreachable1", "on"]
	end

	config.vm.provision "shell",
		env: {
			'DPSRV_DOCKER_IF' => ENV['DPSRV_DOCKER_IF'],
			'DPSRV_DOCKER_IPS' => ENV['DPSRV_DOCKER_IPS'],
			'DPSRV_DOCKER_GW' => ENV['DPSRV_DOCKER_GW'],
			'DPSRV_DOCKER_DNS' => ENV['DPSRV_DOCKER_DNS']
		},
		inline: <<-_EOT_
			set -x
			if [ -n "$DPSRV_DOCKER_IF" ]; then
				nmcli d modify $DPSRV_DOCKER_IF ipv4.method manual
				nmcli d modify $DPSRV_DOCKER_IF ipv4.addresses "$DPSRV_DOCKER_IPS"
				nmcli d modify $DPSRV_DOCKER_IF ipv4.gateway "$DPSRV_DOCKER_GW"
				nmcli d modify $DPSRV_DOCKER_IF ipv4.dns "$DPSRV_DOCKER_DNS"
				nmcli d modify $DPSRV_DOCKER_IF connection.autoconnect yes
				service NetworkManager restart
			fi
			/vagrant/user_data
		_EOT_
end

